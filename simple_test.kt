import org.taylorlang.ast.*
import org.taylorlang.codegen.BytecodeGenerator
import org.taylorlang.typechecker.RefactoredTypeChecker
import kotlinx.collections.immutable.persistentListOf
import java.io.File

fun main() {
    val generator = BytecodeGenerator()
    val typeChecker = RefactoredTypeChecker()
    
    println("Testing boolean literal false...")
    val statements = persistentListOf(
        FunctionCall(
            target = Identifier("println"),
            arguments = persistentListOf(Literal.BooleanLiteral(false))
        )
    )
    
    val program = Program(statements)
    val result = typeChecker.typeCheck(program)
    
    result.fold(
        onSuccess = { typedProgram ->
            val tempDir = File("debug_out")
            tempDir.mkdirs()
            generator.generateBytecode(typedProgram, tempDir, "TestBoolLit").fold(
                onSuccess = { 
                    println("Generated bytecode successfully")
                    val process = ProcessBuilder("java", "-cp", tempDir.absolutePath, "TestBoolLit")
                        .directory(tempDir)
                        .start()
                    process.waitFor()
                    val output = process.inputStream.readBytes().toString(Charsets.UTF_8)
                    println("Output: '$output'")
                    println("Expected: 'false'")
                },
                onFailure = { println("Generation failed: $it") }
            )
        },
        onFailure = { println("Type check failed: $it") }
    )
}
EOF < /dev/null