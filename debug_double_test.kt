package org.taylorlang.codegen

import org.taylorlang.ast.*
import org.taylorlang.typechecker.*
import org.taylorlang.TestUtils
import kotlinx.collections.immutable.persistentListOf
import java.nio.file.Files

fun main() {
    println("=== DEBUGGING DOUBLE LITERAL PATTERN MATCHING ===")
    
    val generator = BytecodeGenerator()
    val typeChecker = RefactoredTypeChecker()
    val tempDir = Files.createTempDirectory("debug_double").toFile()
    
    try {
        val program = TestUtils.createProgram(listOf(
            TestUtils.createExpressionStatement(
                MatchExpression(
                    target = Literal.FloatLiteral(3.14),
                    cases = persistentListOf(
                        MatchCase(
                            pattern = Pattern.LiteralPattern(Literal.FloatLiteral(3.14)),
                            expression = TestUtils.createFunctionCall("println", listOf(Literal.StringLiteral("pi case")))
                        ),
                        MatchCase(
                            pattern = Pattern.WildcardPattern,
                            expression = TestUtils.createFunctionCall("println", listOf(Literal.StringLiteral("other case")))
                        )
                    )
                )
            )
        ))
        
        println("Program created: $program")
        
        // Type check
        val typedProgramResult = typeChecker.typeCheck(program)
        println("Type check result: ${if (typedProgramResult.isSuccess) "SUCCESS" else "FAILURE"}")
        
        typedProgramResult.fold(
            onSuccess = { typedProgram ->
                println("Starting bytecode generation...")
                val result = generator.generateBytecode(typedProgram, tempDir)
                result.fold(
                    onSuccess = { generationResult ->
                        println("SUCCESS: Generated bytecode files: ${generationResult.bytecodeFiles.map { it.name }}")
                    },
                    onFailure = { error ->
                        println("FAILURE: Bytecode generation failed")
                        println("Error: ${error.message}")
                        error.printStackTrace()
                    }
                )
            },
            onFailure = { error ->
                println("FAILURE: Type checking failed")
                println("Error: ${error.message}")
                error.printStackTrace()
            }
        )
        
    } finally {
        tempDir.deleteRecursively()
    }
}