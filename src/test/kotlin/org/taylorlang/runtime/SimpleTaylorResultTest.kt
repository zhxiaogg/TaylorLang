package org.taylorlang.runtime

import org.junit.jupiter.api.Assertions.*
import org.junit.jupiter.api.Test

/**
 * Simple test suite for TaylorResult runtime implementation.
 * 
 * Validates the core Result type functionality that will be used
 * by generated bytecode for try expressions.
 */
class SimpleTaylorResultTest {

    @Test
    fun `test Ok result creation and basic operations`() {
        val result = TaylorResult.ok(42)
        
        assertTrue(result.isOk())
        assertFalse(result.isError())
        assertEquals(42, result.getOrThrow())
        assertEquals(42, result.getOrNull())
    }

    @Test
    fun `test Error result creation and basic operations`() {
        val error = RuntimeException("test error")
        val result = TaylorResult.error(error)
        
        assertFalse(result.isOk())
        assertTrue(result.isError())
        
        // Test getOrThrow propagates the error
        val thrown = assertThrows(RuntimeException::class.java) {
            result.getOrThrow()
        }
        assertEquals("test error", thrown.message)
        
        // Test getOrNull returns null for errors
        assertNull(result.getOrNull())
    }

    @Test
    fun `test Result catching utility for success case`() {
        val result = TaylorResult.catching { 42 }
        assertTrue(result.isOk())
        assertEquals(42, result.getOrThrow())
    }

    @Test
    fun `test Result catching utility for error case`() {
        val result = TaylorResult.catching { 
            throw RuntimeException("test error")
        }
        assertTrue(result.isError())
        
        val thrown = assertThrows(RuntimeException::class.java) {
            result.getOrThrow()
        }
        assertEquals("test error", thrown.message)
    }

    @Test
    fun `test TryLocationTracker error enhancement`() {
        val error = RuntimeException("original error")
        
        val enhancedError = TryLocationTracker.enhanceStacktrace(error, "test:1:1")
        
        // The enhanced error should be the same instance
        assertSame(error, enhancedError)
        
        // Check that suppressed exceptions were added
        assertTrue(enhancedError.suppressed.isNotEmpty())
        
        // Find our added suppressed exception
        val suppressedException = enhancedError.suppressed.find { 
            it.message?.contains("Try expression at test:1:1") == true 
        }
        assertNotNull(suppressedException)
    }

    @Test
    fun `test Result error propagation with Ok`() {
        val okResult = TaylorResult.ok(42)
        
        val propagatedOk = TryLocationTracker.propagateError(okResult, "test:1:1")
        assertTrue(propagatedOk.isOk())
        assertEquals(42, propagatedOk.getOrThrow())
    }

    @Test
    fun `test Result error propagation with Error`() {
        val errorResult = TaylorResult.error(RuntimeException("test error"))
        
        val propagatedError = TryLocationTracker.propagateError(errorResult, "test:1:1")
        assertTrue(propagatedError.isError())
        
        val thrown = assertThrows(RuntimeException::class.java) {
            propagatedError.getOrThrow()
        }
        assertEquals("test error", thrown.message)
        
        // Check that location was added to suppressed exceptions
        assertTrue(thrown.suppressed.isNotEmpty())
    }

    @Test
    fun `test Ok and Error toString representation`() {
        val okResult = TaylorResult.ok(42)
        val errorResult = TaylorResult.error(RuntimeException("test"))
        
        assertTrue(okResult.toString().contains("Ok"))
        assertTrue(okResult.toString().contains("42"))
        
        assertTrue(errorResult.toString().contains("Error"))
        assertTrue(errorResult.toString().contains("test"))
    }

    @Test
    fun `test Result static factory methods`() {
        // Test static ok factory
        val okResult = TaylorResult.ok("hello")
        assertTrue(okResult.isOk())
        assertEquals("hello", okResult.getOrThrow())
        
        // Test static error factory
        val error = RuntimeException("error")
        val errorResult = TaylorResult.error(error)
        assertTrue(errorResult.isError())
        
        val thrown = assertThrows(RuntimeException::class.java) {
            errorResult.getOrThrow()
        }
        assertSame(error, thrown)
    }
}