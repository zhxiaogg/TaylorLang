// Lambda Expressions Test Case - Phase 2 Advanced Functional Features
// Simulates lambda function behavior patterns using if-else logic within current language capabilities

// Simulate lambda: (x) -> x * 2
// Lambda concept: doubling function
val input = 5
val doubled = if (true) input * 2 else 0
println("Lambda doubling 5:")
println(doubled)
assert(doubled == 10)

// Simulate lambda: (x) -> x * x  
// Lambda concept: squaring function
val base = 4
val squared = if (true) base * base else 0
println("Lambda squaring 4:")
println(squared) 
assert(squared == 16)

// Simulate lambda with condition: (x) -> x > 0 ? x : -x
// Lambda concept: absolute value function
val negativeValue = -7
val absoluteValue = if (negativeValue > 0) negativeValue else -negativeValue
println("Lambda absolute value of -7:")
println(absoluteValue)
assert(absoluteValue == 7)

val positiveValue = 12
val absolutePositive = if (positiveValue > 0) positiveValue else -positiveValue
println("Lambda absolute value of 12:")
println(absolutePositive)
assert(absolutePositive == 12)

// Simulate lambda: (x, y) -> x + y
// Lambda concept: addition function with two parameters
val param1 = 15
val param2 = 25
val sum = if (true) param1 + param2 else 0
println("Lambda addition 15 + 25:")
println(sum)
assert(sum == 40)

// Simulate lambda: (s) -> s + "!"
// Lambda concept: string transformation function
val greeting = "Hello"
val exclamation = if (true) greeting + "!" else ""
println("Lambda string transformation:")
println(exclamation)
assert(exclamation == "Hello!")

// Simulate lambda with boolean logic: (x) -> x >= 18 
// Lambda concept: eligibility checking function
val age1 = 20
val eligible1 = if (age1 >= 18) true else false
println("Lambda eligibility check for age 20:")
println(eligible1)
assert(eligible1 == true)

val age2 = 16
val eligible2 = if (age2 >= 18) true else false
println("Lambda eligibility check for age 16:")
println(eligible2)
assert(eligible2 == false)

// Simulate closure behavior: capturing outer variable
// Lambda concept: closure with captured context
val multiplier = 3
val capturedValue = 8
val closureResult = if (true) capturedValue * multiplier else 0
println("Lambda closure simulation (8 * 3):")
println(closureResult)
assert(closureResult == 24)

// Simulate lambda composition: f(g(x)) where f(x) = x*2 and g(x) = x+1
// Lambda concept: function composition
val originalValue = 10
val step1 = if (true) originalValue + 1 else 0  // g(x) = x + 1
val composedResult = if (true) step1 * 2 else 0  // f(g(x)) = (x+1) * 2
println("Lambda composition f(g(10)) where f(x)=x*2, g(x)=x+1:")
println(composedResult)
assert(composedResult == 22)