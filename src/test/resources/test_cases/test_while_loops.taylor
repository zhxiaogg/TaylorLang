// While loops test - using real while loop syntax
// Testing all while loop patterns supported by TaylorLang

// Test 1: Basic counter pattern (counting down)
var n = 3
var decrementCount = 0
while (decrementCount < 2) {
    n = n - 1;
    decrementCount = decrementCount + 1;
}
assert(n == 1)  // After 2 decrements: 3 -> 2 -> 1

// Test 2: Accumulation pattern (sum calculation)
var sum = 0
var i = 1
while (i <= 3) {
    sum = sum + i;
    i = i + 1;
}
assert(sum == 6)  // Should be 1 + 2 + 3 = 6

// Test 3: Counter pattern with threshold
var counter = 0
while (counter < 3) {
    counter = counter + 1;
}
assert(counter == 3)

// Test 4: Conditional processing with while loop
var value = 5
var iterations = 0
while (value > 2 && iterations < 3) {
    value = value - 1;
    iterations = iterations + 1;
}
assert(value == 2)  // 5 - 3 = 2
assert(iterations == 3)

// Test 5: While loop that should not execute
var shouldNotChange = 42
while (false) {
    shouldNotChange = 0;
}
assert(shouldNotChange == 42)  // Should remain unchanged

// Test 6: Complex condition with multiple variables
var x = 0
var y = 5
while (x < 3 && y > 2) {
    x = x + 1;
    y = y - 1;
}
assert(x == 3)
assert(y == 2)

println("While loop tests completed!")